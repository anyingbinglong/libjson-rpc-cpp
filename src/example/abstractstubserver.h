/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_
#define JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_

#include <jsonrpccpp/server.h>
// 存根生成器，自动生成的，抽象服务端存根类
// 这个类的实现，使用了模板方法设计模式
class AbstractStubServer : public jsonrpc::AbstractServer<AbstractStubServer>
{
    public:
        AbstractStubServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<AbstractStubServer>(conn, type)
        {
            // 将远程方法AbstractStubServer::sayHelloI，保存到服务端程序的远程方法列表methods中，以供客户端程序进行调用
            this->bindAndAddMethod(jsonrpc::Procedure("sayHello", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "name",jsonrpc::JSON_STRING, NULL), &AbstractStubServer::sayHelloI);
            // 将远程通知AbstractStubServer::notifyServerI，保存到服务端程序的远程通知列表notifications中，以供客户端程序进行调用
            this->bindAndAddNotification(jsonrpc::Procedure("notifyServer", jsonrpc::PARAMS_BY_NAME,  NULL), &AbstractStubServer::notifyServerI);
        }
        
        // 算法骨架
        // 供客户端程序进行调用的，远程方法
        inline virtual void sayHelloI(const Json::Value &request, Json::Value &response)
        {
            // 调用的是：Json-Rpc库的使用者，使用Json-Rpc库，自定义的服务端程序中，实现的远程方法
            response = this->sayHello(request["name"].asString());
        }
        
        // 算法骨架
        // 供客户端程序进行调用的，远程通知
        inline virtual void notifyServerI(const Json::Value &request)
        {
            (void)request;
            // 调用的是：Json-Rpc库的使用者，使用Json-Rpc库，自定义的服务端程序中，实现的远程通知
            this->notifyServer();
        }
        
        // 下面的的这2个函数，就是上面的2个算法骨架中，需要调用的，支持子类变化的特定的步骤
        // 在Json-Rpc库的使用者，使用Json-Rpc库，自定义的服务端程序中，实现以下2个纯虚函数
        virtual std::string sayHello(const std::string& name) = 0;
        virtual void notifyServer() = 0;
};

#endif //JSONRPC_CPP_STUB_ABSTRACTSTUBSERVER_H_
